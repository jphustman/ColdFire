<project name="coldfire" default="make-dist-zip" basedir=".">
	<description>coldfire build file</description>
	
	<property file="branch.properties" />
	<xmlproperty file="src/firefox/install.rdf" />
	
	<!-- project directories -->
	<property name="src.dir" location="src" />
	<property name="src.cf.dir" location ="src/coldfusion" />
	<property name="src.ff.dir" location ="src/firefox" />
	<property name="build.dir" location="build" />
	<property name="build.cf.dir" location ="build/coldfusion" />
	<property name="build.ff.dir" location ="build/firefox" />
	<property name="dist.dir" location="dist" />

	<property name="excludes" value="**/.*, **/*.jar, **/*.db" />
	<property name="name" value="${ant.project.name}" />
	<property name="extension.id" value="${RDF.Description.em:id}" />
	
	<!-- get version info -->
	<target name="version" depends="properties-local, no-properties-local, cf-rev, ff-rev" description="compute version number">
        
		
		<condition property="revs.available">
			<and>
				<available file="${basedir}/cfrev.properties" />
				<available file="${basedir}/ffrev.properties" />				
			</and>					
		</condition>
		
		<fail unless="revs.available" message="Property files cfrev.properties or ffrev.properties not found."/>
		
		<tstamp/>
		
        <property file="cfrev.properties"/>
		<property file="ffrev.properties"/>
		<property name="version" value="${major.version}.${minor.version}.${coldfusion.revision}.${firefox.revision}"/>
		<echo message="Version ${version}" />
    </target>
	
	
	<!-- set up properties -->	
	<target name="cf-rev-require">
		<uptodate property="cf.rev.notRequired" targetfile="cf.rev.properties">
			<srcfiles dir="${src.cf.dir}"/>
		</uptodate>
	</target>
	
	<target name="ff-rev-require">
		<uptodate property="ff.rev.notRequired" targetfile="ff.rev.properties">
			<srcfiles dir="${src.ff.dir}"/>
		</uptodate>
	</target>
	
	<target name="cf-rev" unless="cf.rev.notRequired" depends="cf-rev-require">		
		<exec executable="svn" dir="${src.cf.dir}" >
			<arg line="log --quiet --limit 1"/>
			<redirector output="cfrev.properties">
				<outputfilterchain>
					<linecontainsregexp>
					  <regexp pattern="r[0-9]+"/>
					</linecontainsregexp>
					<tokenfilter>
						<filetokenizer/>
						<replaceregex pattern="r([0-9]*)(.*)" replace="coldfusion.revision=\1" flags="s" />
					</tokenfilter>				
				</outputfilterchain>
			</redirector>			
		</exec>		
		
	</target>
		
	<target name="ff-rev" unless="ff.rev.notRequired" depends="ff-rev-require">		
		<exec executable="svn" dir="${src.ff.dir}" >
			<arg line="log --quiet --limit 1"/>
			<redirector output="ffrev.properties">
				<outputfilterchain>
					<linecontainsregexp>
					  <regexp pattern="r[0-9]+"/>
					</linecontainsregexp>
					<tokenfilter>
						<filetokenizer/>
						<replaceregex pattern="r([0-9]*)(.*)" replace="firefox.revision=\1" flags="s" />
					</tokenfilter>				
				</outputfilterchain>
			</redirector>			
		</exec>					
				
	</target>	
		
	<target name="cf-rev-check" description="check to see if a cfrev.properties file exists">
        <available file="${basedir}/cfrev.properties" property="cfrev.properties.available"/>
    </target>
	
	<target name="ff-rev-check" description="check to see if a ffrev.properties file exists">
        <available file="${basedir}/ffrev.properties" property="ffrev.properties.available"/>
    </target>
		
	<target name="local-check" description="check to see if a local.properties file exists">
        <available file="${basedir}/local.properties" property="local.properties.available"/>
    </target>

	<target name="properties-local" if="local.properties.available" depends="local-check">
    	<echo message="Loading local properties file."/>
    	<property file="local.properties"/>
    </target>

    <target name="no-properties-local" unless="local.properties.available" depends="local-check">
        <echo message="No local properties file, setting defaults."/>
        <!-- set these values -->
		<property name="install.dir" value="OperatingSystemPathToTestPofile"/>
       	<property name="cfserver.debug.dir" value="OperatingSystemPathToColdFusionDebugTemplates" />
		<property name="profile.name" value="NameOfTestProfile" />
    </target>

	<!-- expand templates -->
	<target name="install-dependency" description="check template or branch properties changes">
        <uptodate property="install.expansion.notRequired" targetfile="${src.ff.dir}/install.rdf">
            <srcfiles dir="." includes="src/firefox/install.rdf.tpl.xml,*.properties"/>
        </uptodate>
		<echo message="${install.expansion.notRequired}" />
    </target>

	<target name="expand-install-template" depends="install-dependency, version" unless="install.expansion.notRequired" description="update install.rdf based on template and branch.properties">
        <copy file="${src.ff.dir}/install.rdf.tpl.xml" tofile="${src.ff.dir}/install.rdf" overwrite="true">
               <filterchain>
                       <replacetokens>
                            <token key="VERSION" value="${version}"/>
                       </replacetokens>
               </filterchain>
        </copy>
    </target>

	<target name="expand-templates" depends="expand-install-template" description="fill in version info" />

	<!-- targets for incremental builds -->

	<target name="copy-to-extensions" depends="clean-reg" description="copies extension files to profle">
        <copy todir="${install.dir}/extensions/${extension.id}" >
            <fileset dir="${src.ff.dir}" excludes="**/*.tpl.xml" />
			<filterchain>
                   <replacetokens>
                        <token key="VERSION" value="${version}"/>
                   </replacetokens>
           </filterchain>
        </copy>
    </target>

	<target name="copy-to-cfserver" depends="version" description="copies coldfusion debug template to server">
        <copy file="${src.cf.dir}/debug/coldfire.cfm" tofile="${cfserver.debug.dir}/coldfire.cfm" overwrite="true">
               <filterchain>
                       <replacetokens>
                            <token key="CF_REVISION" value="${coldfusion.revision}"/>
                       </replacetokens>
               </filterchain>
        </copy>
    </target>

	<target name="incremental-ff" depends="version, expand-templates, copy-to-extensions" description="builds a development version of the firefox extension and copies to profile" />

	<target name="incremental-cf" depends="version, copy-to-cfserver" description="builds a development version of the coldfusion debug template and copies to server" />

	<target name="incremental-both" depends="version, expand-templates, copy-to-extensions, copy-to-cfserver" />

	<target name="incremental-relaunch" depends="version, expand-templates, copy-to-extensions, copy-to-cfserver, start-firefox" />
		
	<target name="clean-reg" description="delete compreg.dat to reload service" >
        <delete file="${install.dir}/compreg.dat"/>
    </target>
	
	<!-- targets used for creating a distribution -->
	<target name="set-up-build" depends="clean, version, expand-templates" description="sets up build directory">
		<mkdir dir="${build.dir}" />
	</target>

	<target name="build-coldfusion" depends="set-up-build" description="prepares coldfusion debug template for distribution">
		<mkdir dir="${build.cf.dir}" />
		<copy file="${src.cf.dir}/debug/coldfire.cfm" tofile="${build.cf.dir}/debug/coldfire.cfm" overwrite="true">
               <filterchain>
                       <replacetokens>
                            <token key="CF_REVISION" value="${coldfusion.revision}"/>
                       </replacetokens>
               </filterchain>
        </copy>
	</target>

	<target name="build-chrome-jar" depends="build-coldfusion" description="create the xpi chrome contents including the chrome jar">
		<mkdir dir="${build.ff.dir}" />
		<mkdir dir="${build.ff.dir}/jar" />
		<mkdir dir="${build.ff.dir}/chrome" />

		<copy todir="${build.ff.dir}/jar">
			<fileset dir="${src.ff.dir}/chrome" includes="content/**, locale/**, skin/**" excludes="${excludes}"/>
			<filterchain>
                   <replacetokens>
                        <token key="VERSION" value="${version}"/>
                   </replacetokens>
           </filterchain>
		</copy>
		
		<zip destfile="${build.ff.dir}/chrome/${name}.jar" 
			update="true"
			basedir="${build.ff.dir}/jar"
			includes="**" />		

		<delete dir="${build.ff.dir}/jar" />

	</target>

	<!--
	<target name="build-platform-jars" description="create xpi platform jars">
        <mkdir dir="${build.ff.dir}/Darwin" />
        <mkdir dir="${build.ff.dir}/Linux" />
        <mkdir dir="${build.ff.dir}/linux-gnu" />
        <mkdir dir="${build.ff.dir}/WINNT" />
        <zip destfile="${build.ff.dir}/Darwin/${ant.project.name}.jar" 
			update="true"
            basedir="${src.ff.dir}/platform/Darwin" 
			includes="skin/**" 
			excludes="${excludes}" />
        <zip destfile="${build.ff.dir}/Linux/${ant.project.name}.jar" 
			update="true"
            basedir="${src.ff.dir}/platform/Linux"
            includes="skin/**"
            excludes="${excludes}" />
        <zip destfile="${build.ff.dir}/linux-gnu/${ant.project.name}.jar" 
			update="true"
            basedir="${src.ff.dir}/platform/linux-gnu"
            includes="skin/**"
            excludes="${excludes}" />
        <zip destfile="${build.ff.dir}/WINNT/${ant.project.name}.jar" 
			update="true"
            basedir="${src.ff.dir}/platform/WINNT"
            includes="skin/**"
            excludes="${excludes}" />
    </target>
	-->
	
	<target name="build-xpi-defaults" depends="build-chrome-jar" description="create the xpi defaults contents">
		<mkdir dir="${build.ff.dir}/defaults" />		

		<copy todir="${build.ff.dir}/defaults">
			<fileset dir="${src.ff.dir}/defaults" />
		</copy>
		
	</target>

	<target name="build-xpi-platform" depends="build-xpi-defaults" description="create the xpi platform contents">
		<mkdir dir="${build.ff.dir}/platform" />		

		<copy todir="${build.ff.dir}/platform">
			<fileset dir="${src.ff.dir}/platform" includes="**" excludes="${excludes}, **/skin/**"  />
		</copy>
		
	</target>

	<target name="build-xpi" depends="build-xpi-defaults" description="create root xpi contents">
		
		<copy file="${src.ff.dir}/install.rdf" toDir="${build.ff.dir}" />
		<copy file="${src.ff.dir}/chrome.manifest" toDir="${build.ff.dir}" />
		<!--
 		Need to include the space because "chrome/" recursively matches (replace is stupid). 
		-->
		<replace file="${build.ff.dir}/chrome.manifest" token=" chrome/" value=" jar:chrome/${name}.jar!/" />	
	
	</target>

	<target name="set-up-dist" depends="build-xpi" description="sets up dist directory">
		<mkdir dir="${dist.dir}" />
	</target>

	<target name="make-xpi-dist" depends="set-up-dist" description="generate the xpi for distribution">
		<zip destfile="${dist.dir}/${name}_v${version}.xpi">
			<zipfileset dir="${build.ff.dir}" includes="**" />
		</zip>
	</target>
	
	<target name="make-coldfuion-dist" depends="make-xpi-dist" description="copy the codfusion template for distribution">
		<copy todir="${dist.dir}">
			<fileset dir="${build.cf.dir}" />
		</copy>
	</target>

	<target name="make-docs-dist" depends="make-coldfuion-dist" description="copy the docs for distribution">
		<copy todir="${dist.dir}">
			<fileset dir="${src.dir}/docs" includes="*.txt" />
			 <filterchain>
                   <replacetokens>
						<token key="VERSION" value="${version}"/>
                   </replacetokens>
           </filterchain>
		</copy>
		<copy todir="${dist.dir}">
			<fileset dir="${src.dir}/docs" excludes="*.txt" />
		</copy>
	</target>
	
	<target name="make-dist-zip" depends="make-docs-dist" description="zip up the distribution">
		<mkdir dir="${dist.dir}/zip" />
		<zip destfile="${dist.dir}/zip/${name}_v${version}.zip">
			<zipfileset dir="${dist.dir}" includes="**" excludes="zip/**" />
		</zip>
	</target>
	
	<target name="clean" description="clean up">
		<!-- Delete the ${build.dir} and ${dist.dir} directory trees -->
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />		
	</target>

	<target name="kill-firefox" description="closes and opens firefox on windows">
		<exec executable="cmd"> 
        	<arg line="/c TASKKILL /IM firefox.exe" />
	   	</exec>
	</target>

	<target name="start-firefox" depends="version, kill-firefox">
		<exec executable="cmd"> 
        	<arg line='/c START firefox -P "${profile.name}"'/>
    	</exec>
	</target>
	
</project>